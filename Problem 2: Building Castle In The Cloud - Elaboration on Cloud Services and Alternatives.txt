## **Elaboration on AWS Services and Alternatives**

### 1. **Frontend**
- **AWS Service**: Hosted on **Amazon S3** with **CloudFront** for CDN.
- **Why Used**:
  - S3 provides scalable and cost-effective storage for static assets.
  - CloudFront ensures low-latency delivery of assets globally.
- **Alternatives**:
  - **Vercel/Netlify**: Easier to use but less control over infrastructure.
  - **Firebase Hosting**: Fully managed but tightly coupled with Firebase.

---

### 2. **API Gateway**
- **AWS Service**: **Amazon API Gateway**.
- **Why Used**:
  - Fully managed, scalable, and integrates seamlessly with other AWS services.
  - Provides features like rate limiting, caching, and authentication.
- **Alternatives**:
  - **Kong/Envoy**: Open-source and customizable but require self-hosting.
  - **NGINX**: Lightweight but requires manual configuration.

---

### 3. **Order Matching Engine**
- **Technology**: Custom C++ or Rust.
- **Hosting**: **Amazon EC2** (spot instances for cost savings).
- **Why Used**:
  - C++/Rust provides ultra-low latency for high-frequency trading.
  - EC2 offers flexibility and scalability for compute-intensive workloads.
- **Alternatives**:
  - **AWS Fargate**: Serverless containers but may not meet latency requirements.
  - **AWS Lambda**: Not suitable for low-latency, long-running processes.

---

### 4. **User Management**
- **AWS Service**: **Amazon Cognito**.
- **Why Used**:
  - Fully managed, scalable, and supports multi-factor authentication (MFA).
  - Integrates easily with AWS services.
- **Alternatives**:
  - **Auth0**: More feature-rich but higher cost.
  - **Custom OAuth2/JWT**: Full control but requires more development effort.

---

### 5. **Wallet Service**
- **AWS Service**: Hosted on **AWS Lambda** with **Amazon DynamoDB**.
- **Why Used**:
  - Lambda provides serverless scalability for handling wallet transactions.
  - DynamoDB offers low-latency, scalable NoSQL storage.
- **Alternatives**:
  - **Node.js on EC2**: More control but requires manual scaling.
  - **PostgreSQL**: Relational but may not scale as well as DynamoDB.

---

### 6. **Market Data Service**
- **AWS Service**: **Amazon API Gateway** with **WebSockets**.
- **Why Used**:
  - API Gateway supports WebSockets for real-time, bidirectional communication.
  - Scales automatically to handle high throughput.
- **Alternatives**:
  - **gRPC**: High performance but more complex to implement.
  - **MQTT**: Lightweight but less commonly used for financial applications.

---

### 7. **Database Layer**
- **AWS Services**:
  - **Amazon Aurora PostgreSQL** for relational data (e.g., user accounts, orders).
  - **Amazon DynamoDB** for time-series data (e.g., market data, transaction history).
- **Why Used**:
  - Aurora is fully managed, scalable, and compatible with PostgreSQL.
  - DynamoDB is highly scalable and optimized for write-heavy workloads.
- **Alternatives**:
  - **Cassandra**: Open-source and scalable but requires self-hosting.
  - **InfluxDB**: Optimized for time-series data but less general-purpose.

---

### 8. **Cache Layer**
- **AWS Service**: **Amazon ElastiCache** (Redis).
- **Why Used**:
  - Fully managed, scalable, and provides low-latency caching.
  - Supports advanced data structures like sorted sets and pub/sub.
- **Alternatives**:
  - **Memcached**: Simpler but lacks Redis's advanced features.
  - **Self-hosted Redis**: More control but requires manual management.

---

### 9. **Message Queue**
- **AWS Service**: **Amazon SQS**.
- **Why Used**:
  - Fully managed, scalable, and integrates seamlessly with AWS services.
  - Provides reliable message delivery and retries.
- **Alternatives**:
  - **Kafka**: High throughput but requires self-hosting.
  - **RabbitMQ**: Open-source but requires manual scaling.

---

### 10. **Monitoring and Logging**
- **AWS Services**: **Amazon CloudWatch** for monitoring, **AWS Lambda** for log processing.
- **Why Used**:
  - CloudWatch provides comprehensive monitoring and alerting.
  - Lambda enables serverless log processing and analysis.
- **Alternatives**:
  - **Prometheus + Grafana**: Open-source but requires self-hosting.
  - **Datadog**: Comprehensive but expensive.
